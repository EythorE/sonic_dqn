import gymnasium as gym
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.nn import TransformerEncoder, TransformerEncoderLayer

from cnn_feature_extractor import SonicCNN

# Generated by ChatGPT and also (https://stackoverflow.com/questions/77444485/using-positional-encoding-in-pytorch) XD
class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_len=50):
        super(PositionalEncoding, self).__init__()
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-torch.log(torch.tensor(10000.0)) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:x.size(0), :]
        return x


class MLP(nn.Sequential):
    def __init__(self, input_size, output_size, hidden_size=None):
        if hidden_size is None:
            hidden_size = input_size
        super().__init__(
            nn.Linear(input_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, output_size)
        )


class SonicTransformer(nn.Module):
    def __init__(self, observation_space, n_actions, N_embedding=512, nhead=4, num_layers=1):
        super().__init__()
        self.observation_space = observation_space

        self.cnn = SonicCNN(observation_space, N_embedding)
        self.positional_encoding = PositionalEncoding(N_embedding)
        self.action_encoding = nn.Embedding(n_actions, N_embedding)
        encoder_layer = TransformerEncoderLayer(d_model=N_embedding, nhead=nhead, batch_first=True)
        self.transformer_encoder = TransformerEncoder(encoder_layer, num_layers=num_layers)
        # we should consider some layer norms
        self.q_values = MLP(N_embedding, n_actions)
        self.immediate_reward = MLP(N_embedding, n_actions)
        self.next_obs_embedding_pred = MLP(N_embedding, N_embedding)

    def generate_embeddings(self, x):
        B, T, C, H, W = x.size()
        # actions.size(): (B, T)
        x = x.reshape(B * T, C, H, W)
        x = self.cnn(x)
        x = x.reshape(B, T, -1)
        x = F.normalize(x, p=2, dim=-1)
        return x

    def forward_embeddings(self, embeddings, actions):
        # actions: B, T
        B, T, E = embeddings.size()
        pos_encoded = self.positional_encoding(embeddings)
        action_encoded = self.action_encoding(actions) # encodes the action that was taken to get to this observation
        x = pos_encoded + action_encoded

        causal_mask = nn.Transformer.generate_square_subsequent_mask(T)
        x = self.transformer_encoder(x, mask=causal_mask, is_causal=True)
        output = {
                "q_values": self.q_values(x),
                "immediate_reward": self.immediate_reward(x),
                "next_obs_embedding_pred": self.next_obs_embedding_pred(x),
                "obs_embedding": embeddings
            }
        return output

    def forward(self, x, actions):
        B, T, C, H, W = x.size()
        # actions.size(): (B, T)
        x = x.reshape(B * T, C, H, W)
        x = self.cnn(x)
        x = x.reshape(B, T, -1)
        x = F.normalize(x, p=2, dim=-1)
        obs_embedding = x

        pos_encoded = self.positional_encoding(x)
        action_encoded = self.action_encoding(actions) # encodes the action that was taken to get to this observation
        x = pos_encoded + action_encoded

        causal_mask = nn.Transformer.generate_square_subsequent_mask(T)
        x = self.transformer_encoder(x, mask=causal_mask, is_causal=True)
        output = {
                "q_values": self.q_values(x),
                "immediate_reward": self.immediate_reward(x),
                "next_obs_embedding_pred": self.next_obs_embedding_pred(x),
                "obs_embedding": obs_embedding
            }
        return output

if __name__ == "__main__":
    # Example usage:
    import gymnasium as gym
    import numpy as np
    B, T, C, H, W = 32, 10, 1, 112, 160
    num_classes = 10
    N_embedding = 512
    nhead = 8
    num_layers = 6
    n_actions = 10
    observation_space = gym.spaces.Box(
        low=-128,
        high=127,
        shape=(1, H, W),
        dtype=np.dtype('int8'),
    )
    
    model = SonicTransformer(observation_space, n_actions, N_embedding, nhead, num_layers)
    x = torch.randn(B, T, C, H, W)
    actions = torch.randint(0, num_classes, (B, T))
    
    output = model(x, actions)
    print(output.shape, f"expecting [{B}, {T}, {n_actions}]")  # Expected shape: (B, T, n_actions)
